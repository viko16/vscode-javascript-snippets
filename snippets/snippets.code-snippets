{
  // import
  "import": {
    "prefix": "imp",
    "body": [
      "import ${2:moduleName} from '${1:module}';"
    ],
    "description": "import"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": [
      "import '${1:module}';"
    ],
    "description": "import no module name"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": [
      "import { ${2:moduleName} } from '${1:module}';"
    ],
    "description": "import destructing"
  },
  "importEverything": {
    "prefix": "ime",
    "body": [
      "import * as ${2:alias} from '${1:module}';"
    ],
    "description": "import everything"
  },
  "importAs": {
    "prefix": "ima",
    "body": [
      "import { ${2:originalName} as ${3:alias} } from '${1:module}';"
    ],
    "description": "import as"
  },
  "importReact": {
    "prefix": "imr",
    "body": [
      "import React from 'react';",
      "$0"
    ],
    "description": "Import React Library"
  },
  // export
  "exportDefault": {
    "prefix": "epd",
    "body": [
      "export default ${1};"
    ],
    "description": "Export default"
  },
  // console
  "consoleLog": {
    "prefix": "clg",
    "body": [
      "console.log(${1:object})"
    ],
    "description": "Console log",
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": [
      "console.log('${1:object} :>> ', ${1:object});"
    ],
    "description": "Console log an object with its name",
  },
  "consoleTime": {
    "prefix": "ctm",
    "body": [
      "console.time('${1:object}')"
    ],
    "description": "Console time"
  },
  "consoleTimeEnd": {
    "prefix": "cte",
    "body": [
      "console.timeEnd('${1:object}')"
    ],
    "description": "Console time end"
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": [
      "console.warn(${1:object})"
    ],
    "description": "Console warn"
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": [
      "console.info(${1:object})"
    ],
    "description": "Console info"
  },
  "consoleError": {
    "prefix": "cin",
    "body": [
      "console.error(${1:object})"
    ],
    "description": "Console error"
  },
  // class
  "constructor": {
    "prefix": "con",
    "body": [
      "constructor(${1:params}) {",
      "\t${0}",
      "}"
    ],
    "description": "Constructor in class"
  },
  // react
  "reactClassComponent": {
    "prefix": "rcc",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES6 module system"
  },
  "reactFunctionalComponent": {
    "prefix": "rfc",
    "body": [
      "import React from 'react';",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "useState()": {
    "prefix": "us",
    "body": [
      "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2);",
      "$0"
    ],
    "description": "useState()"
  },
  "componentDidMount": {
    "prefix": "cdm",
    "body": [
      "componentDidMount() {",
      "\t${1}",
      "}"
    ],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "shouldComponentUpdate": {
    "prefix": "scu",
    "body": [
      "shouldComponentUpdate(nextProps, nextState) {",
      "\t${1}",
      "}"
    ],
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "componentDidUpdate": {
    "prefix": "cdup",
    "body": [
      "componentDidUpdate(prevProps, prevState) {",
      "\t${1}",
      "}"
    ],
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "componentWillUnmount": {
    "prefix": "cwun",
    "body": [
      "componentWillUnmount() {",
      "\t${1}",
      "}"
    ],
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "componentProps": {
    "prefix": "props",
    "body": [
      "this.props.${1}"
    ],
    "description": "Access component's props"
  },
  "componentState": {
    "prefix": "state",
    "body": [
      "this.state.${1}"
    ],
    "description": "Access component's state"
  },
  // unit test
  "describeBlock": {
    "prefix": "desc",
    "body": [
      "describe('${1:name}', () => {",
      "\t${2}",
      "})"
    ],
    "description": "Testing `describe` block"
  },
  "testBlock": {
    "prefix": "test",
    "body": [
      "test('should ${1:condition}', () => {",
      "\t${2}",
      "})"
    ],
    "description": "Testing `test` block"
  }
}